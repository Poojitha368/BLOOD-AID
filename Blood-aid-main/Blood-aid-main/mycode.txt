from flask import Flask, render_template, request, redirect, url_for, flash
from flask_mysqldb import MySQL
import yaml

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Needed for flashing messages

# Load database configuration
with open('db.yaml', 'r') as file:
    db = yaml.load(file, Loader=yaml.FullLoader)

# Configure MySQL
app.config['MYSQL_HOST'] = db['mysql_host']
app.config['MYSQL_USER'] = db['mysql_user']
app.config['MYSQL_PASSWORD'] = db['mysql_password']
app.config['MYSQL_DB'] = db['mysql_db']

mysql = MySQL(app)
 

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/donor_form', methods=['GET', 'POST'])
def donor_form():
    if request.method == 'POST':
        userdetails = request.form
        username = userdetails.get('username')
        blood_group = userdetails.get('blood_group')
        units = int(userdetails.get('units'))  # Convert to integer
        disease = userdetails.get('disease')
        age = int(userdetails.get('age'))  # Convert to integer

        cur = mysql.connection.cursor()
        cur.execute("SELECT * FROM donor_details WHERE username = %s", [username])
        existing_user = cur.fetchone()
        
        if existing_user:
            flash('Username already taken, please try again.', 'danger')
            return redirect('/donor_form')

        cur.execute("INSERT INTO donor_details(username, bloodgroup, units, disease, age) VALUES (%s, %s, %s, %s, %s)", (username, blood_group, units, disease, age))
        mysql.connection.commit()
        cur.close()
        flash('Donor added successfully!', 'success')
        return redirect('/donor_form')

    return render_template('donor_form.html')

@app.route('/donation_requests', methods=['GET'])
def donation_requests():
    cur = mysql.connection.cursor()
    result_val = cur.execute("SELECT * FROM donor_details")
    if result_val > 0:
        userdetails = cur.fetchall()
        cur.close()
        return render_template('donation_requests.html', userdetails=userdetails)
    cur.close()
    return 'No users found', 404

@app.route('/delete/<username>', methods=['POST'])
def delete(username):
    cur = mysql.connection.cursor()
    cur.execute("DELETE FROM donor_details WHERE username = %s", [username])
    mysql.connection.commit()
    cur.close()
    return redirect(url_for('donation_requests'))

@app.route('/patient_form', methods=['GET', 'POST'])
def patient_form():
    if request.method == 'POST':
        userdetails = request.form
        username = userdetails.get('username')
        blood_group = userdetails.get('blood_group')
        units = int(userdetails.get('units'))  # Convert to integer
        reason = userdetails.get('reason')
        age = int(userdetails.get('age'))  # Convert to integer

        if username and blood_group and units is not None and reason and age is not None:
            cur = mysql.connection.cursor()
            cur.execute("SELECT * FROM patients_details WHERE username = %s", [username])
            existing_user = cur.fetchone()
        
            if existing_user:
                flash('Username already taken, please try again.', 'danger')
                return redirect('/patient_form')

            cur.execute("INSERT INTO patients_details(username, bloodgroup, units, reason, age) VALUES (%s, %s, %s, %s, %s)", (username, blood_group, units, reason, age))
            mysql.connection.commit()
            cur.close()
            flash('Patient added successfully!', 'success')
            return redirect('/patient_form')
        else:
            return 'Missing required fields', 400
    return render_template('patient_form.html')

@app.route('/patient_requests', methods=['GET'])
def patient_requests():
    cur = mysql.connection.cursor()
    result_val = cur.execute("SELECT * FROM patients_details")
    if result_val > 0:
        userdetails = cur.fetchall()
        cur.close()
        return render_template('patient_requests.html', userdetails=userdetails)
    cur.close()
    return 'No users found', 404

@app.route('/reject_patient_request/<username>', methods=['POST'])
def reject_patient_request(username):
    cur = mysql.connection.cursor()
    cur.execute("DELETE FROM patients_details WHERE username = %s", [username])
    mysql.connection.commit()
    cur.close()
    flash('Request rejected', 'danger')
    return redirect('/patient_requests')

@app.route('/accept_donor/<username>', methods=['POST'])
def accept_donor(username):
    cur = mysql.connection.cursor()
    
    # Get blood group and units of the donor
    cur.execute("SELECT bloodgroup, units FROM donor_details WHERE username = %s", [username])
    donor = cur.fetchone()
    
    if donor:
        blood_group, units = donor
        # Update donor status to 'Accepted'
        cur.execute("UPDATE donor_details SET status = 'Accepted' WHERE username = %s", [username])
        
        if cur.rowcount > 0:
            mysql.connection.commit()
            # Update blood stock
            cur.execute("INSERT INTO blood_stock (bloodgroup, units) VALUES (%s, %s) ON DUPLICATE KEY UPDATE units = units + %s", (blood_group, units, units))
            mysql.connection.commit()
            flash('Donation request accepted!', 'success')
        else:
            flash('Donor not found or already accepted!', 'danger')
    else:
        flash('Donor not found!', 'danger')
    
    cur.close()
    return redirect(url_for('donation_requests'))

@app.route('/accept_patient/<username>', methods=['POST'])
def accept_patient(username):
    cur = mysql.connection.cursor()
    
    # Get blood group and units of the patient
    cur.execute("SELECT bloodgroup, units FROM patients_details WHERE username = %s", [username])
    patient = cur.fetchone()
    
    if patient:
        blood_group, units = patient
        # Check if there are enough units available
        cur.execute("SELECT units FROM blood_stock WHERE bloodgroup = %s", [blood_group])
        stock_units = cur.fetchone()
        
        if stock_units and stock_units[0] >= units:
            # Update patient request status to 'Accepted'
            cur.execute("UPDATE patients_details SET status = 'Accepted' WHERE username = %s", [username])
            
            if cur.rowcount > 0:
                mysql.connection.commit()
                # Deduct units from blood stock
                cur.execute("UPDATE blood_stock SET units = units - %s WHERE bloodgroup = %s", (units, blood_group))
                mysql.connection.commit()
                flash('Patient request accepted!', 'success')
            else:
                flash('Patient request not found or already accepted!', 'danger')
        else:
            flash('Not enough blood units available!', 'danger')
    else:
        flash('Patient request not found!', 'danger')
    
    cur.close()
    return redirect(url_for('patient_requests'))

@app.route('/blood_stock', methods=['GET'])
def blood_stock_view():
    cur = mysql.connection.cursor()
    cur.execute("SELECT bloodgroup, units FROM blood_stock")
    blood_stock = cur.fetchall()
    cur.close()
    blood_stock_dict = {row[0]: row[1] for row in blood_stock}
    return render_template('blood_stock.html', blood_stock=blood_stock_dict)

@app.route('/donor_history', methods=['GET'])
def donor_history():
    cur = mysql.connection.cursor()
    result_val = cur.execute("SELECT * FROM donor_details")
    if result_val > 0:
        donor_history = cur.fetchall()
    else:
        donor_history = []
    cur.close()
    return render_template('donor_history.html', donor_history=donor_history)

@app.route('/patient_history', methods=['GET'])
def patient_history():
    cur = mysql.connection.cursor()
    result_val = cur.execute("SELECT * FROM patients_details")
    if result_val > 0:
        patient_history = cur.fetchall()
    else:
        patient_history = []
    cur.close()
    return render_template('patient_history.html', patient_history=patient_history)

if __name__ == '__main__':
    # initialize_blood_stock()  # Initialize the blood stock table
    app.run(debug=True)
